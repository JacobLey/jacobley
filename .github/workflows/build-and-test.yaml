name: Build and Test

on:
  workflow_call:
    inputs:
      depth:
        type: number
        required: false
        default: 1
      base-ref:
        type: string
        required: false
      head-ref:
        type: string
        required: false

jobs:

  install-rush:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: actions/cache@v3
        id: cache-install
        with:
          path: common/config/temp
          key: ${{ runner.os }}-npm-${{ hashFiles('common/config/pnpm-lock.yaml',
            'rush.json') }}

      # If node_modules not built, install node and install
      - if: steps.cache-install.outputs.cache-hit != 'true'
        uses: actions/setup-node@v3
        with:
          node-version: 16
      - if: steps.cache-install.outputs.cache-hit != 'true'
        run: node ./common/scripts/install-run-rush.js install

      # We'll store all our outputted "builds" in a `./tarballs` directory
      # that only needs to live for the rest of the build + test
      - run: |
          mkdir tarballs
          tar -zcf ./tarballs/rush.tgz ./common/config/temp/**
      - uses: actions/upload-artifact@v3
        with:
          name: build
          # Use wildcard to ensure full path is written
          path: |
            *tarballs/rush.tgz
          retention-days: 1

  root-test:
    needs: install-rush
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 16
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/download-artifact@v3
        with:
          name: build
      - run: tar -xf ./tarballs/rush.tgz
      # Ensure symlinks are generated + root files are linted
      # Conceptually barrel + rivendell checks should go here... but files aren't built yet
      - run: |
          ./scripts/write-symlinks.mjs
          node ${{ github.workspace }}/common/scripts/install-run-rushx.js lint-root

  # For each package (matrix.package) run lint tests
  package-lint:
    needs: install-rush
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 16
        # Rivendell will auto-expand to each package
        package:
          - name: default-import
            safe-name: default-import
            path: tools/default-import
          - name: enum-to-array
            safe-name: enum-to-array
            path: tools/enum-to-array
          - name: named-patch
            safe-name: named-patch
            path: tools/named-patch
          - name: parse-cwd
            safe-name: parse-cwd
            path: tools/parse-cwd
          - name: static-emitter
            safe-name: static-emitter
            path: tools/static-emitter
          - name: entry-script
            safe-name: entry-script
            path: tools/entry-script
          - name: juniper
            safe-name: juniper
            path: apps/juniper
          - name: root-package-json
            safe-name: root-package-json
            path: tools/root-package-json
          - name: barrelify
            safe-name: barrelify
            path: apps/barrelify
          - name: packages-list
            safe-name: packages-list
            path: tools/packages-list
          - name: dependency-order
            safe-name: dependency-order
            path: tools/dependency-order
          - name: rivendell
            safe-name: rivendell
            path: apps/rivendell
          - name: jacobley
            safe-name: jacobley
            path: root/jacobley
    steps:
      - uses: actions/checkout@v3
        with:
          # Should include depth on any jobs that will use `changed` command/logic
          # Not necessary for hash/dependencies only commands
          fetch-depth: ${{ inputs.depth }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/download-artifact@v3
        with:
          name: build

      # Only need to unpack node_modules (eslint executable + third party types).
      # Packages are being built, but package.json specifies to use original `.ts`
      # types over build `.d.ts` files, so everything that is required is already available.
      - run: tar -xf ./tarballs/rush.tgz

      # If a package has not changed since
      - name: Check if package has changes
        id: rivendell
        run: |
          echo "::set-output name=changed::true"
          exit 0
          # TODO run rivendell to check
          CHANGED=`npx rivendell changed ${{ matrix.package.name }} ${{ inputs.base-ref }} ${{ inputs.head-ref }}`
          echo "::set-output name=changed::${CHANGED}"

      - if: steps.rivendell.outputs.changed == 'true'
        working-directory: ${{ matrix.package.path }}
        run: node ${{ github.workspace }}/common/scripts/install-run-rushx.js lint

  # Run some top-level tests once everything is built/tested
  # Ideally these tests occur at start of CI (root-test), but executables are not built yet...
  post-test:
    needs:
      - root-test
      # Ensures all packages are individually tested first
      # which implicitly requires all packages built
      - package-test-5
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 16
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/download-artifact@v3
        with:
          name: build

      - run: |
          for TARBALL in ./tarballs/*.tgz
            do
              tar -xf $TARBALL
            done

      - run: |
          node ./common/scripts/install-run-rush.js barrel --ci
          node ./common/scripts/install-run-rush.js rivendell --ci
  package-build-0:
    needs: install-rush
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Rivendell will populate matrix per-job with packages for that stage
        package:
          - name: default-import
            safe-name: default-import
            path: tools/default-import
          - name: enum-to-array
            safe-name: enum-to-array
            path: tools/enum-to-array
          - name: named-patch
            safe-name: named-patch
            path: tools/named-patch
          - name: parse-cwd
            safe-name: parse-cwd
            path: tools/parse-cwd
          - name: static-emitter
            safe-name: static-emitter
            path: tools/static-emitter
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      # Download _all_ builds up to this point
      - uses: actions/download-artifact@v3
        with:
          name: build
      - run: |
          for TARBALL in ./tarballs/*.tgz
            do
              tar -xf $TARBALL
            done

      # Generate a hash that specifies "state" of package + dependencies
      - name: Calculate dependency hash
        id: rivendell
        run: |
          echo "::set-output name=hash::${{ hashFiles('**') }}"
          exit 0
          # TODO use rivendell to hash
          HASH=`npx rivendell hash ${{ matrix.package.name }}`
          echo "::set-output name=hash::${HASH}"

      # Try to load a previously cached version of build (determined by hash)
      - uses: actions/cache@v3
        id: hash-build
        with:
          path: ./tarballs/${{ matrix.package.safe-name }}.tgz
          key: ${{ runner.os }}-package-name-${{ matrix.package.name }}-${{
            steps.rivendell.outputs.hash }}

      # If cache missed build the package
      - if: steps.hash-build.outputs.cache-hit != 'true'
        working-directory: ${{ matrix.package.path }}
        run: node ${{ github.workspace }}/common/scripts/install-run-rushx.js build

      # If cache missed (continued) copy files into tarball
      - if: steps.hash-build.outputs.cache-hit != 'true'
        run: tar -zcf ./tarballs/${{ matrix.package.safe-name }}.tgz ${{
          matrix.package.path }}/dist/**

      # Upload tarball to build artifact (was either built in this run, or used cached version)
      - uses: actions/upload-artifact@v3
        with:
          name: build
          path: '*tarballs/${{ matrix.package.safe-name }}.tgz'
          retention-days: 1
  package-build-1:
    needs:
      - install-rush
      - package-build-0
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Rivendell will populate matrix per-job with packages for that stage
        package:
          - name: entry-script
            safe-name: entry-script
            path: tools/entry-script
          - name: juniper
            safe-name: juniper
            path: apps/juniper
          - name: root-package-json
            safe-name: root-package-json
            path: tools/root-package-json
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      # Download _all_ builds up to this point
      - uses: actions/download-artifact@v3
        with:
          name: build
      - run: |
          for TARBALL in ./tarballs/*.tgz
            do
              tar -xf $TARBALL
            done

      # Generate a hash that specifies "state" of package + dependencies
      - name: Calculate dependency hash
        id: rivendell
        run: |
          echo "::set-output name=hash::${{ hashFiles('**') }}"
          exit 0
          # TODO use rivendell to hash
          HASH=`npx rivendell hash ${{ matrix.package.name }}`
          echo "::set-output name=hash::${HASH}"

      # Try to load a previously cached version of build (determined by hash)
      - uses: actions/cache@v3
        id: hash-build
        with:
          path: ./tarballs/${{ matrix.package.safe-name }}.tgz
          key: ${{ runner.os }}-package-name-${{ matrix.package.name }}-${{
            steps.rivendell.outputs.hash }}

      # If cache missed build the package
      - if: steps.hash-build.outputs.cache-hit != 'true'
        working-directory: ${{ matrix.package.path }}
        run: node ${{ github.workspace }}/common/scripts/install-run-rushx.js build

      # If cache missed (continued) copy files into tarball
      - if: steps.hash-build.outputs.cache-hit != 'true'
        run: tar -zcf ./tarballs/${{ matrix.package.safe-name }}.tgz ${{
          matrix.package.path }}/dist/**

      # Upload tarball to build artifact (was either built in this run, or used cached version)
      - uses: actions/upload-artifact@v3
        with:
          name: build
          path: '*tarballs/${{ matrix.package.safe-name }}.tgz'
          retention-days: 1
  package-build-2:
    needs:
      - install-rush
      - package-build-1
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Rivendell will populate matrix per-job with packages for that stage
        package:
          - name: barrelify
            safe-name: barrelify
            path: apps/barrelify
          - name: packages-list
            safe-name: packages-list
            path: tools/packages-list
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      # Download _all_ builds up to this point
      - uses: actions/download-artifact@v3
        with:
          name: build
      - run: |
          for TARBALL in ./tarballs/*.tgz
            do
              tar -xf $TARBALL
            done

      # Generate a hash that specifies "state" of package + dependencies
      - name: Calculate dependency hash
        id: rivendell
        run: |
          echo "::set-output name=hash::${{ hashFiles('**') }}"
          exit 0
          # TODO use rivendell to hash
          HASH=`npx rivendell hash ${{ matrix.package.name }}`
          echo "::set-output name=hash::${HASH}"

      # Try to load a previously cached version of build (determined by hash)
      - uses: actions/cache@v3
        id: hash-build
        with:
          path: ./tarballs/${{ matrix.package.safe-name }}.tgz
          key: ${{ runner.os }}-package-name-${{ matrix.package.name }}-${{
            steps.rivendell.outputs.hash }}

      # If cache missed build the package
      - if: steps.hash-build.outputs.cache-hit != 'true'
        working-directory: ${{ matrix.package.path }}
        run: node ${{ github.workspace }}/common/scripts/install-run-rushx.js build

      # If cache missed (continued) copy files into tarball
      - if: steps.hash-build.outputs.cache-hit != 'true'
        run: tar -zcf ./tarballs/${{ matrix.package.safe-name }}.tgz ${{
          matrix.package.path }}/dist/**

      # Upload tarball to build artifact (was either built in this run, or used cached version)
      - uses: actions/upload-artifact@v3
        with:
          name: build
          path: '*tarballs/${{ matrix.package.safe-name }}.tgz'
          retention-days: 1
  package-build-3:
    needs:
      - install-rush
      - package-build-2
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Rivendell will populate matrix per-job with packages for that stage
        package:
          - name: dependency-order
            safe-name: dependency-order
            path: tools/dependency-order
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      # Download _all_ builds up to this point
      - uses: actions/download-artifact@v3
        with:
          name: build
      - run: |
          for TARBALL in ./tarballs/*.tgz
            do
              tar -xf $TARBALL
            done

      # Generate a hash that specifies "state" of package + dependencies
      - name: Calculate dependency hash
        id: rivendell
        run: |
          echo "::set-output name=hash::${{ hashFiles('**') }}"
          exit 0
          # TODO use rivendell to hash
          HASH=`npx rivendell hash ${{ matrix.package.name }}`
          echo "::set-output name=hash::${HASH}"

      # Try to load a previously cached version of build (determined by hash)
      - uses: actions/cache@v3
        id: hash-build
        with:
          path: ./tarballs/${{ matrix.package.safe-name }}.tgz
          key: ${{ runner.os }}-package-name-${{ matrix.package.name }}-${{
            steps.rivendell.outputs.hash }}

      # If cache missed build the package
      - if: steps.hash-build.outputs.cache-hit != 'true'
        working-directory: ${{ matrix.package.path }}
        run: node ${{ github.workspace }}/common/scripts/install-run-rushx.js build

      # If cache missed (continued) copy files into tarball
      - if: steps.hash-build.outputs.cache-hit != 'true'
        run: tar -zcf ./tarballs/${{ matrix.package.safe-name }}.tgz ${{
          matrix.package.path }}/dist/**

      # Upload tarball to build artifact (was either built in this run, or used cached version)
      - uses: actions/upload-artifact@v3
        with:
          name: build
          path: '*tarballs/${{ matrix.package.safe-name }}.tgz'
          retention-days: 1
  package-build-4:
    needs:
      - install-rush
      - package-build-3
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Rivendell will populate matrix per-job with packages for that stage
        package:
          - name: rivendell
            safe-name: rivendell
            path: apps/rivendell
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      # Download _all_ builds up to this point
      - uses: actions/download-artifact@v3
        with:
          name: build
      - run: |
          for TARBALL in ./tarballs/*.tgz
            do
              tar -xf $TARBALL
            done

      # Generate a hash that specifies "state" of package + dependencies
      - name: Calculate dependency hash
        id: rivendell
        run: |
          echo "::set-output name=hash::${{ hashFiles('**') }}"
          exit 0
          # TODO use rivendell to hash
          HASH=`npx rivendell hash ${{ matrix.package.name }}`
          echo "::set-output name=hash::${HASH}"

      # Try to load a previously cached version of build (determined by hash)
      - uses: actions/cache@v3
        id: hash-build
        with:
          path: ./tarballs/${{ matrix.package.safe-name }}.tgz
          key: ${{ runner.os }}-package-name-${{ matrix.package.name }}-${{
            steps.rivendell.outputs.hash }}

      # If cache missed build the package
      - if: steps.hash-build.outputs.cache-hit != 'true'
        working-directory: ${{ matrix.package.path }}
        run: node ${{ github.workspace }}/common/scripts/install-run-rushx.js build

      # If cache missed (continued) copy files into tarball
      - if: steps.hash-build.outputs.cache-hit != 'true'
        run: tar -zcf ./tarballs/${{ matrix.package.safe-name }}.tgz ${{
          matrix.package.path }}/dist/**

      # Upload tarball to build artifact (was either built in this run, or used cached version)
      - uses: actions/upload-artifact@v3
        with:
          name: build
          path: '*tarballs/${{ matrix.package.safe-name }}.tgz'
          retention-days: 1
  package-build-5:
    needs:
      - install-rush
      - package-build-4
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Rivendell will populate matrix per-job with packages for that stage
        package:
          - name: jacobley
            safe-name: jacobley
            path: root/jacobley
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      # Download _all_ builds up to this point
      - uses: actions/download-artifact@v3
        with:
          name: build
      - run: |
          for TARBALL in ./tarballs/*.tgz
            do
              tar -xf $TARBALL
            done

      # Generate a hash that specifies "state" of package + dependencies
      - name: Calculate dependency hash
        id: rivendell
        run: |
          echo "::set-output name=hash::${{ hashFiles('**') }}"
          exit 0
          # TODO use rivendell to hash
          HASH=`npx rivendell hash ${{ matrix.package.name }}`
          echo "::set-output name=hash::${HASH}"

      # Try to load a previously cached version of build (determined by hash)
      - uses: actions/cache@v3
        id: hash-build
        with:
          path: ./tarballs/${{ matrix.package.safe-name }}.tgz
          key: ${{ runner.os }}-package-name-${{ matrix.package.name }}-${{
            steps.rivendell.outputs.hash }}

      # If cache missed build the package
      - if: steps.hash-build.outputs.cache-hit != 'true'
        working-directory: ${{ matrix.package.path }}
        run: node ${{ github.workspace }}/common/scripts/install-run-rushx.js build

      # If cache missed (continued) copy files into tarball
      - if: steps.hash-build.outputs.cache-hit != 'true'
        run: tar -zcf ./tarballs/${{ matrix.package.safe-name }}.tgz ${{
          matrix.package.path }}/dist/**

      # Upload tarball to build artifact (was either built in this run, or used cached version)
      - uses: actions/upload-artifact@v3
        with:
          name: build
          path: '*tarballs/${{ matrix.package.safe-name }}.tgz'
          retention-days: 1
  package-test-0:
    needs:
      - package-build-0
      - package-lint
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 16
        package:
          - name: default-import
            safe-name: default-import
            path: tools/default-import
          - name: enum-to-array
            safe-name: enum-to-array
            path: tools/enum-to-array
          - name: named-patch
            safe-name: named-patch
            path: tools/named-patch
          - name: parse-cwd
            safe-name: parse-cwd
            path: tools/parse-cwd
          - name: static-emitter
            safe-name: static-emitter
            path: tools/static-emitter
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: ${{ inputs.depth }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/download-artifact@v3
        with:
          name: build
      - run: |
          for TARBALL in ./tarballs/*.tgz
            do
              tar -xf $TARBALL
            done

      - name: Check if package has changes
        run: |
          echo "::set-output name=changed::true"
          exit 0
          # TODO use rivendell
          CHANGED=`npx rivendell changed ${{ matrix.package.name }} ${{ inputs.base-ref }} ${{ inputs.head-ref }}`
          echo "::set-output name=changed::${CHANGED}"
        id: rivendell

      # If package has experienced changes, test package
      - if: steps.rivendell.outputs.changed == 'true'
        working-directory: ${{ matrix.package.path }}
        run: node ${{ github.workspace }}/common/scripts/install-run-rushx.js test
  package-test-1:
    needs:
      - package-build-1
      - package-lint
      - package-test-0
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 16
        package:
          - name: entry-script
            safe-name: entry-script
            path: tools/entry-script
          - name: juniper
            safe-name: juniper
            path: apps/juniper
          - name: root-package-json
            safe-name: root-package-json
            path: tools/root-package-json
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: ${{ inputs.depth }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/download-artifact@v3
        with:
          name: build
      - run: |
          for TARBALL in ./tarballs/*.tgz
            do
              tar -xf $TARBALL
            done

      - name: Check if package has changes
        run: |
          echo "::set-output name=changed::true"
          exit 0
          # TODO use rivendell
          CHANGED=`npx rivendell changed ${{ matrix.package.name }} ${{ inputs.base-ref }} ${{ inputs.head-ref }}`
          echo "::set-output name=changed::${CHANGED}"
        id: rivendell

      # If package has experienced changes, test package
      - if: steps.rivendell.outputs.changed == 'true'
        working-directory: ${{ matrix.package.path }}
        run: node ${{ github.workspace }}/common/scripts/install-run-rushx.js test
  package-test-2:
    needs:
      - package-build-2
      - package-lint
      - package-test-1
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 16
        package:
          - name: barrelify
            safe-name: barrelify
            path: apps/barrelify
          - name: packages-list
            safe-name: packages-list
            path: tools/packages-list
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: ${{ inputs.depth }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/download-artifact@v3
        with:
          name: build
      - run: |
          for TARBALL in ./tarballs/*.tgz
            do
              tar -xf $TARBALL
            done

      - name: Check if package has changes
        run: |
          echo "::set-output name=changed::true"
          exit 0
          # TODO use rivendell
          CHANGED=`npx rivendell changed ${{ matrix.package.name }} ${{ inputs.base-ref }} ${{ inputs.head-ref }}`
          echo "::set-output name=changed::${CHANGED}"
        id: rivendell

      # If package has experienced changes, test package
      - if: steps.rivendell.outputs.changed == 'true'
        working-directory: ${{ matrix.package.path }}
        run: node ${{ github.workspace }}/common/scripts/install-run-rushx.js test
  package-test-3:
    needs:
      - package-build-3
      - package-lint
      - package-test-2
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 16
        package:
          - name: dependency-order
            safe-name: dependency-order
            path: tools/dependency-order
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: ${{ inputs.depth }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/download-artifact@v3
        with:
          name: build
      - run: |
          for TARBALL in ./tarballs/*.tgz
            do
              tar -xf $TARBALL
            done

      - name: Check if package has changes
        run: |
          echo "::set-output name=changed::true"
          exit 0
          # TODO use rivendell
          CHANGED=`npx rivendell changed ${{ matrix.package.name }} ${{ inputs.base-ref }} ${{ inputs.head-ref }}`
          echo "::set-output name=changed::${CHANGED}"
        id: rivendell

      # If package has experienced changes, test package
      - if: steps.rivendell.outputs.changed == 'true'
        working-directory: ${{ matrix.package.path }}
        run: node ${{ github.workspace }}/common/scripts/install-run-rushx.js test
  package-test-4:
    needs:
      - package-build-4
      - package-lint
      - package-test-3
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 16
        package:
          - name: rivendell
            safe-name: rivendell
            path: apps/rivendell
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: ${{ inputs.depth }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/download-artifact@v3
        with:
          name: build
      - run: |
          for TARBALL in ./tarballs/*.tgz
            do
              tar -xf $TARBALL
            done

      - name: Check if package has changes
        run: |
          echo "::set-output name=changed::true"
          exit 0
          # TODO use rivendell
          CHANGED=`npx rivendell changed ${{ matrix.package.name }} ${{ inputs.base-ref }} ${{ inputs.head-ref }}`
          echo "::set-output name=changed::${CHANGED}"
        id: rivendell

      # If package has experienced changes, test package
      - if: steps.rivendell.outputs.changed == 'true'
        working-directory: ${{ matrix.package.path }}
        run: node ${{ github.workspace }}/common/scripts/install-run-rushx.js test
  package-test-5:
    needs:
      - package-build-5
      - package-lint
      - package-test-4
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version:
          - 16
        package:
          - name: jacobley
            safe-name: jacobley
            path: root/jacobley
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: ${{ inputs.depth }}
      - uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - uses: actions/download-artifact@v3
        with:
          name: build
      - run: |
          for TARBALL in ./tarballs/*.tgz
            do
              tar -xf $TARBALL
            done

      - name: Check if package has changes
        run: |
          echo "::set-output name=changed::true"
          exit 0
          # TODO use rivendell
          CHANGED=`npx rivendell changed ${{ matrix.package.name }} ${{ inputs.base-ref }} ${{ inputs.head-ref }}`
          echo "::set-output name=changed::${CHANGED}"
        id: rivendell

      # If package has experienced changes, test package
      - if: steps.rivendell.outputs.changed == 'true'
        working-directory: ${{ matrix.package.path }}
        run: node ${{ github.workspace }}/common/scripts/install-run-rushx.js test
